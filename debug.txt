warning: unreachable statement
  --> derive\src\lib.rs:49:5
   |
47 |       panic!("{:#?}", ast);
   |       -------------------- any code following this expression is unreachable
48 |
49 | /     let syn::Data::Struct(ref data_struct) = ast.data else {
50 | |         panic!("Storeable can only be derived on structs");
51 | |     };
   | |______^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `name`
  --> derive\src\lib.rs:45:9
   |
45 |     let name = &ast.ident;
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_name`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `bookmark-derive` (lib) generated 2 warnings
   Compiling bookmark-library v0.1.0 (C:\Projects\Programming\bookmarks-rs\library)
error: proc-macro derive panicked
  --> library\src\bookmark.rs:10:17
   |
10 | #[derive(Debug, bookmark_derive::Storeable)]
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: message: DeriveInput {
               attrs: [],
               vis: Public(
                   VisPublic {
                       pub_token: Pub,
                   },
               ),
               ident: Ident {
                   ident: "Bookmark",
                   span: #0 bytes(2724..2732),
               },
               generics: Generics {
                   lt_token: None,
                   params: [],
                   gt_token: None,
                   where_clause: None,
               },
               data: Struct(
                   DataStruct {
                       struct_token: Struct,
                       fields: Named(
                           FieldsNamed {
                               brace_token: Brace,
                               named: [
                                   Field {
                                       attrs: [
                                           Attribute {
                                               pound_token: Pound,
                                               style: Outer,
                                               bracket_token: Bracket,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "line",
                                                               span: #0 bytes(2741..2745),
                                                           },
                                                           arguments: None,
                                                       },
                                                   ],
                                               },
                                               tokens: TokenStream [],
                                           },
                                       ],
                                       vis: Inherited,
                                       ident: Some(
                                           Ident {
                                               ident: "line",
                                               span: #0 bytes(2751..2755),
                                           },
                                       ),
                                       colon_token: Some(
                                           Colon,
                                       ),
                                       ty: Path(
                                           TypePath {
                                               qself: None,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "Option",
                                                               span: #0 bytes(2757..2763),
                                                           },
                                                           arguments: AngleBracketed(
                                                               AngleBracketedGenericArguments {
                                                                   colon2_token: None,
                                                                   lt_token: Lt,
                                                                   args: [
                                                                       Type(
                                                                           Path(
                                                                               TypePath {
                                                                                   qself: None,
                                                                                   path: Path {
                                                                                       leading_colon: None,
                                                                                       segments: [
                                                                                           PathSegment {
                                                                                               ident: Ident {
                                                                                                   ident: "ContentString",
                                                                                                   span: #0 bytes(2764..2777),
                                                                                               },
                                                                                               arguments: None,
                                                                                           },
                                                                                       ],
                                                                                   },
                                                                               },
                                                                           ),
                                                                       ),
                                                                   ],
                                                                   gt_token: Gt,
                                                               },
                                                           ),
                                                       },
                                                   ],
                                               },
                                           },
                                       ),
                                   },
                                   Comma,
                                   Field {
                                       attrs: [
                                           Attribute {
                                               pound_token: Pound,
                                               style: Outer,
                                               bracket_token: Bracket,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "string",
                                                               span: #0 bytes(2786..2792),
                                                           },
                                                           arguments: None,
                                                       },
                                                   ],
                                               },
                                               tokens: TokenStream [],
                                           },
                                       ],
                                       vis: Inherited,
                                       ident: Some(
                                           Ident {
                                               ident: "url",
                                               span: #0 bytes(2798..2801),
                                           },
                                       ),
                                       colon_token: Some(
                                           Colon,
                                       ),
                                       ty: Path(
                                           TypePath {
                                               qself: None,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "Range",
                                                               span: #0 bytes(2803..2808),
                                                           },
                                                           arguments: AngleBracketed(
                                                               AngleBracketedGenericArguments {
                                                                   colon2_token: None,
                                                                   lt_token: Lt,
                                                                   args: [
                                                                       Type(
                                                                           Path(
                                                                               TypePath {
                                                                                   qself: None,
                                                                                   path: Path {
                                                                                       leading_colon: None,
                                                                                       segments: [
                                                                                           PathSegment {
                                                                                               ident: Ident {
                                                                                                   ident: "usize",
                                                                                                   span: #0 bytes(2809..2814),
                                                                                               },
                                                                                               arguments: None,
                                                                                           },
                                                                                       ],
                                                                                   },
                                                                               },
                                                                           ),
                                                                       ),
                                                                   ],
                                                                   gt_token: Gt,
                                                               },
                                                           ),
                                                       },
                                                   ],
                                               },
                                           },
                                       ),
                                   },
                                   Comma,
                                   Field {
                                       attrs: [
                                           Attribute {
                                               pound_token: Pound,
                                               style: Outer,
                                               bracket_token: Bracket,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "string",
                                                               span: #0 bytes(2823..2829),
                                                           },
                                                           arguments: None,
                                                       },
                                                   ],
                                               },
                                               tokens: TokenStream [],
                                           },
                                       ],
                                       vis: Inherited,
                                       ident: Some(
                                           Ident {
                                               ident: "description",
                                               span: #0 bytes(2835..2846),
                                           },
                                       ),
                                       colon_token: Some(
                                           Colon,
                                       ),
                                       ty: Path(
                                           TypePath {
                                               qself: None,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "Range",
                                                               span: #0 bytes(2848..2853),
                                                           },
                                                           arguments: AngleBracketed(
                                                               AngleBracketedGenericArguments {
                                                                   colon2_token: None,
                                                                   lt_token: Lt,
                                                                   args: [
                                                                       Type(
                                                                           Path(
                                                                               TypePath {
                                                                                   qself: None,
                                                                                   path: Path {
                                                                                       leading_colon: None,
                                                                                       segments: [
                                                                                           PathSegment {
                                                                                               ident: Ident {
                                                                                                   ident: "usize",
                                                                                                   span: #0 bytes(2854..2859),
                                                                                               },
                                                                                               arguments: None,
                                                                                           },
                                                                                       ],
                                                                                   },
                                                                               },
                                                                           ),
                                                                       ),
                                                                   ],
                                                                   gt_token: Gt,
                                                               },
                                                           ),
                                                       },
                                                   ],
                                               },
                                           },
                                       ),
                                   },
                                   Comma,
                                   Field {
                                       attrs: [
                                           Attribute {
                                               pound_token: Pound,
                                               style: Outer,
                                               bracket_token: Bracket,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "string",
                                                               span: #0 bytes(2868..2874),
                                                           },
                                                           arguments: None,
                                                       },
                                                   ],
                                               },
                                               tokens: TokenStream [],
                                           },
                                       ],
                                       vis: Inherited,
                                       ident: Some(
                                           Ident {
                                               ident: "tag",
                                               span: #0 bytes(2880..2883),
                                           },
                                       ),
                                       colon_token: Some(
                                           Colon,
                                       ),
                                       ty: Path(
                                           TypePath {
                                               qself: None,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "Range",
                                                               span: #0 bytes(2885..2890),
                                                           },
                                                           arguments: AngleBracketed(
                                                               AngleBracketedGenericArguments {
                                                                   colon2_token: None,
                                                                   lt_token: Lt,
                                                                   args: [
                                                                       Type(
                                                                           Path(
                                                                               TypePath {
                                                                                   qself: None,
                                                                                   path: Path {
                                                                                       leading_colon: None,
                                                                                       segments: [
                                                                                           PathSegment {
                                                                                               ident: Ident {
                                                                                                   ident: "usize",
                                                                                                   span: #0 bytes(2891..2896),
                                                                                               },
                                                                                               arguments: None,
                                                                                           },
                                                                                       ],
                                                                                   },
                                                                               },
                                                                           ),
                                                                       ),
                                                                   ],
                                                                   gt_token: Gt,
                                                               },
                                                           ),
                                                       },
                                                   ],
                                               },
                                           },
                                       ),
                                   },
                                   Comma,
                                   Field {
                                       attrs: [
                                           Attribute {
                                               pound_token: Pound,
                                               style: Outer,
                                               bracket_token: Bracket,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "composite",
                                                               span: #0 bytes(2905..2914),
                                                           },
                                                           arguments: None,
                                                       },
                                                   ],
                                               },
                                               tokens: TokenStream [
                                                   Group {
                                                       delimiter: Parenthesis,
                                                       stream: TokenStream [
                                                           Ident {
                                                               ident: "tag",
                                                               span: #0 bytes(2915..2918),
                                                           },
                                                       ],
                                                       span: #0 bytes(2914..2919),
                                                   },
                                               ],
                                           },
                                       ],
                                       vis: Inherited,
                                       ident: Some(
                                           Ident {
                                               ident: "tags",
                                               span: #0 bytes(2925..2929),
                                           },
                                       ),
                                       colon_token: Some(
                                           Colon,
                                       ),
                                       ty: Path(
                                           TypePath {
                                               qself: None,
                                               path: Path {
                                                   leading_colon: None,
                                                   segments: [
                                                       PathSegment {
                                                           ident: Ident {
                                                               ident: "Vec",
                                                               span: #0 bytes(2931..2934),
                                                           },
                                                           arguments: AngleBracketed(
                                                               AngleBracketedGenericArguments {
                                                                   colon2_token: None,
                                                                   lt_token: Lt,
                                                                   args: [
                                                                       Type(
                                                                           Path(
                                                                               TypePath {
                                                                                   qself: None,
                                                                                   path: Path {
                                                                                       leading_colon: None,
                                                                                       segments: [
                                                                                           PathSegment {
                                                                                               ident: Ident {
                                                                                                   ident: "Range",
                                                                                                   span: #0 bytes(2935..2940),
                                                                                               },
                                                                                               arguments: AngleBracketed(
                                                                                                   AngleBracketedGenericArguments {
                                                                                                       colon2_token: None,
                                                                                                       lt_token: Lt,
                                                                                                       args: [
                                                                                                           Type(
                                                                                                               Path(
                                                                                                                   TypePath {
                                                                                                                       qself: None,
                                                                                                                       path: Path {
                                                                                                                           leading_colon: None,
                                                                                                                           segments: [
                                                                                                                               PathSegment {
                                                                                                                                   ident: Ident {
                                                                                                                                       ident: "usize",
                                                                                                                                       span: #0 bytes(2941..2946),
                                                                                                                                   },
                                                                                                                                   arguments: None,
                                                                                                                               },
                                                                                                                           ],
                                                                                                                       },
                                                                                                                   },
                                                                                                               ),
                                                                                                           ),
                                                                                                       ],
                                                                                                       gt_token: Gt,
                                                                                                   },
                                                                                               ),
                                                                                           },
                                                                                       ],
                                                                                   },
                                                                               },
                                                                           ),
                                                                       ),
                                                                   ],
                                                                   gt_token: Gt,
                                                               },
                                                           ),
                                                       },
                                                   ],
                                               },
                                           },
                                       ),
                                   },
                                   Comma,
                               ],
                           },
                       ),
                       semi_token: None,
                   },
               ),
           }

warning: unused import: `Storeable`
 --> library\src\command\bookmark\load.rs:4:26
  |
4 |     bookmark::{Bookmark, Storeable},
  |                          ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Storeable`
 --> library\src\command\bookmark\save.rs:2:26
  |
2 |     bookmark::{Bookmark, Storeable},
  |                          ^^^^^^^^^

error[E0599]: no method named `tag` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\bookmark.rs:89:40
   |
89 |         self.tags.iter().map(|r| &self.tag()[r.clone()])
   |                                        ^^^ field, not a method
   |
help: remove the arguments
   |
89 -         self.tags.iter().map(|r| &self.tag()[r.clone()])
89 +         self.tags.iter().map(|r| &self.tag[r.clone()])
   |
help: there is a method with a similar name
   |
89 |         self.tags.iter().map(|r| &self.tags()[r.clone()])
   |                                        ~~~~

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\bookmark.rs:96:36
   |
96 |             Self::create_line(self.url(), self.description(), self.tags())
   |                                    ^^^-- help: remove the arguments
   |                                    |
   |                                    field, not a method

error[E0599]: no method named `description` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\bookmark.rs:96:48
   |
96 |             Self::create_line(self.url(), self.description(), self.tags())
   |                                                ^^^^^^^^^^^-- help: remove the arguments
   |                                                |
   |                                                field, not a method
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the trait `std::error::Error` defines an item `description`, but is explicitly unimplemented

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
   --> library\src\bookmark.rs:120:35
    |
120 |         write!(f, "{} | {}", self.url(), self.description())?;
    |                                   ^^^-- help: remove the arguments
    |                                   |
    |                                   field, not a method

error[E0599]: no method named `description` found for reference `&bookmark::Bookmark` in the current scope
   --> library\src\bookmark.rs:120:47
    |
120 |         write!(f, "{} | {}", self.url(), self.description())?;
    |                                               ^^^^^^^^^^^-- help: remove the arguments
    |                                               |
    |                                               field, not a method
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `std::error::Error` defines an item `description`, but is explicitly unimplemented

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\command\bookmark\filter.rs:25:55
   |
25 |             |bookmark| args.iter().all(|arg| bookmark.url().contains(arg)),
   |                                                       ^^^ private field, not a method

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\command\bookmark\filter.rs:50:56
   |
50 |             |bookmark| !args.iter().any(|arg| bookmark.url().contains(arg)),
   |                                                        ^^^ private field, not a method

error[E0599]: the method `extend_from_slice` exists for struct `RefMut<'_, Vec<bookmark::Bookmark>>`, but its trait bounds were not satisfied
  --> library\src\command\bookmark\load.rs:37:37
   |
37 |         self.bookmarks.borrow_mut().extend_from_slice(&loaded);
   |                                     ^^^^^^^^^^^^^^^^^
   |
  ::: library\src\bookmark.rs:11:1
   |
11 | pub struct Bookmark {
   | ------------------- doesn't satisfy `bookmark::Bookmark: Clone`
   |
   = note: the following trait bounds were not satisfied:
           `bookmark::Bookmark: Clone`
help: consider annotating `bookmark::Bookmark` with `#[derive(Clone)]`
  --> library\src\bookmark.rs:11:1
   |
11 | #[derive(Clone)]
   |

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\command\bookmark\regex.rs:28:45
   |
28 |             |bookmark| re.is_match(bookmark.url()),
   |                                             ^^^ private field, not a method

error[E0599]: no method named `url` found for reference `&bookmark::Bookmark` in the current scope
  --> library\src\command\bookmark\regex.rs:56:46
   |
56 |             |bookmark| !re.is_match(bookmark.url()),
   |                                              ^^^ private field, not a method

For more information about this error, try `rustc --explain E0599`.
warning: `bookmark-library` (lib) generated 2 warnings
error: could not compile `bookmark-library` due to 11 previous errors; 2 warnings emitted
